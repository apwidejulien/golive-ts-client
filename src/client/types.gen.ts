// This file is auto-generated by @hey-api/openapi-ts

export type ErrorCollection = {
    errorMessages?: Array<(string)>;
    errors?: {
        [key: string]: (string);
    };
    status?: number;
};

export type ApplicationRequest = {
    name: string;
    versionPrefix?: string;
    mappedProjectId?: number;
    createNewVersion?: boolean;
    deploymentConfiguration?: DeploymentConfiguration;
    deploymentAttributes?: Array<Attribute>;
    tierType?: TierType;
    parents?: Array<NamedReference>;
    tiers?: Array<NamedReference>;
    incomingDependencies?: Array<NamedReference>;
    outgoingDependencies?: Array<NamedReference>;
};

export type ApplicationResponse = {
    id: number;
    name: string;
    versionPrefix?: string;
    mappedProjectId?: number;
    createNewVersion?: boolean;
    deploymentConfiguration?: DeploymentConfiguration;
    deploymentAttributes?: Array<Attribute>;
    tierType?: TierType;
    parents?: Array<NamedReference>;
    tiers?: Array<NamedReference>;
    incomingDependencies?: Array<NamedReference>;
    outgoingDependencies?: Array<NamedReference>;
};

export enum TierType {
    STANDALONE = 'STANDALONE',
    TIER = 'TIER'
}

export type Attribute = {
    id?: number;
    key?: string;
    type?: string;
    secured?: boolean;
    createdBy?: string;
    createdOn?: number;
    modifiedBy?: string;
    modifiedOn?: number;
};

export type AttributeValue = {
    name?: string;
    value?: string;
};

export type DeploymentResponse = {
    readonly deploymentId: number;
    readonly id: number;
    readonly environmentId: number;
    versionName?: string;
    versionId?: string;
    readonly deployer: string;
    readonly deployedTime: number;
    readonly categoryId: number;
    readonly categoryName: string;
    readonly applicationId: number;
    readonly applicationName: string;
    readonly endTime?: number;
    readonly duration?: number;
    buildNumber?: string;
    description?: string;
    orderedAttributes?: Array<AttributeValue>;
    issueKeys?: Array<(string)>;
    attributes?: unknown;
};

export type DeploymentRequest = {
    readonly deploymentId: number;
    readonly id: number;
    versionName?: string;
    versionId?: string;
    buildNumber?: string;
    description?: string;
    issueKeys?: Array<(string)>;
    attributes?: unknown;
};

export type DeploymentConfiguration = {
    showBuildNumber?: boolean;
    showDescription?: boolean;
    preventDeploymentMerge?: boolean;
    readonlyDeployedIssues?: boolean;
};

export type NamedReference = {
    id?: number;
    name?: string;
};

export type CreatableNamedReference = {
    id?: number;
    name?: string;
    /**
     * should we create reference if not existing
     */
    autoCreate?: boolean;
};

export type EnvironmentCategory = {
    id: number;
    name: string;
    order?: number;
    type?: EnvironmentCategoryType;
};

export enum EnvironmentCategoryType {
    DEVELOPMENT = 'DEVELOPMENT',
    TESTING = 'TESTING',
    STAGING = 'STAGING',
    PRODUCTION = 'PRODUCTION'
}

export type EnvironmentStatus = {
    id: number;
    name: string;
    description?: string;
    color?: string;
    order?: number;
};

export type ScopedStatusChangeRequest = {
    scope?: EnvironmentsScope;
    status?: NamedReference;
    ignoredStatuses?: Array<NamedReference>;
    statusMapping?: {
        [key: string]: NamedReference;
    };
};

export type EnvironmentStatusChangeRequest = {
    id?: number;
    name?: string;
};

export type StatusChange = {
    readonly id: number;
    readonly categoryId: number;
    readonly categoryName: string;
    readonly applicationId: number;
    readonly applicationName: string;
    readonly statusName: string;
    status?: EnvironmentStatus;
    readonly changedBy: string;
    readonly changedOn: number;
    /**
     * endTime is not defined if status is the current one
     */
    readonly endTime?: number;
    /**
     * duration in ms. Only present if endTime is set
     */
    readonly duration?: number;
};

export type StatusChangeResult = {
    errors?: ErrorCollection;
    type?: StatusChangeResultType;
    previousStatus?: NamedReference;
    currentStatus?: NamedReference;
};

export enum StatusChangeResultType {
    IGNORED = 'IGNORED',
    CHANGED = 'CHANGED',
    FAILED = 'FAILED',
    NOT_MODIFIED = 'NOT_MODIFIED'
}

export type StatusChangesResponse = {
    requestedStatus?: NamedReference;
    environments?: Array<EnvironmentStatusChange>;
};

export type EnvironmentStatusChange = {
    environment?: NamedReference;
    result?: StatusChangeResult;
};

export type EnvironmentsScope = {
    criteria?: Array<EnvironmentSearchCriterion>;
};

export type IssueDeployedRequest = {
    issueKey?: string;
    scope?: EnvironmentsScope;
    buildNumber?: string;
    versionName?: string;
    noEmailNotification?: boolean;
};

export type EnvironmentSearchCriterion = {
    name?: string;
    values?: Array<(string)>;
};

export type EnvironmentPermissionScheme = {
    id: number;
    name: string;
    description: string;
    roles: Array<(string)>;
    readonly global: boolean;
};

export type EnvironmentRequest = {
    application: NamedReference;
    category: NamedReference;
    name: string;
    description?: string;
    environmentPermissionScheme?: NamedReference;
    url?: string;
    parent?: NamedReference;
    tiers?: Array<NamedReference>;
    incomingDependencies?: Array<NamedReference>;
    outgoingDependencies?: Array<NamedReference>;
    attributes?: {
        [key: string]: (string);
    };
    attributesToDelete?: Array<(string)>;
};

export type EnvironmentResponse = {
    readonly id?: number;
    application: ApplicationResponse;
    category: EnvironmentCategory;
    name: string;
    description?: string;
    environmentPermissionScheme?: EnvironmentPermissionScheme;
    status?: EnvironmentStatus;
    url?: string;
    deployment?: DeploymentResponse;
    readonly watched?: boolean;
    parent?: NamedReference;
    tiers?: Array<NamedReference>;
    incomingDependencies?: Array<NamedReference>;
    outgoingDependencies?: Array<NamedReference>;
    attributes?: {
        [key: string]: (string);
    };
};

export type EnvironmentFilter = {
    criteria?: Array<EnvironmentSearchCriterion>;
    sortOrder?: string;
    sortBy?: string;
    limit?: number;
    offset?: number;
    expand?: boolean;
};

export type PaginatedEnvironmentResponse = {
    count: number;
    limit?: number;
    offset: number;
    environments?: Array<EnvironmentResponse>;
};

export type EnvironmentReference = {
    id?: number;
    name?: string;
    application?: NamedReference;
    category?: NamedReference;
};

export type EnvironmentReferenceResponse = {
    items?: Array<EnvironmentReference>;
};

export type CloneEnvironmentOverride = {
    name?: string;
};

export type CloneEnvironmentRequest = {
    from?: NamedReference;
    failIfNameExists?: boolean;
    includeTiers?: boolean;
    override?: CloneEnvironmentOverride;
};

export type OptionReferenceResource = {
    id?: number;
    name?: string;
};

export type OptionReferenceResourceResponse = {
    items?: Array<OptionReferenceResource>;
};

export type WatcherStatistics = {
    dumb?: string;
};

export type EnvironmentWatcher = {
    readonly id?: number;
    userKey?: string;
    userName?: string;
    environmentId: number;
    watchEnvironmentChanged: boolean;
    watchDeployedVersion: boolean;
    watchStatus: boolean;
    watchIssueAdded: boolean;
    watchIssueRemoved: boolean;
};

export type VersionInfoRequest = {
    application?: NamedReference;
    versionName: string;
    versionDescription?: string;
    /**
     * ISO-8601 date time format
     */
    startDate?: string;
    /**
     * ISO-8601 date time format
     */
    releaseDate?: string;
    released?: boolean;
    issues?: VersionIssues;
};

export type EnvironmentInfoRequest = {
    environmentSelector?: EnvironmentInfoSelector;
    deployment?: DeploymentInfo;
    environment: EnvironmentInfo;
    status?: NamedReference;
};

export type DeploymentInfo = {
    versionName?: string;
    /**
     * ISO-8601 date time format
     */
    deployedDate?: string;
    versionId?: string;
    buildNumber?: string;
    description?: string;
    attributes?: unknown;
    issues?: DeployedIssues;
};

export type EnvironmentInfoSelector = {
    environment?: CreatableNamedReference;
    application?: CreatableNamedReference;
    category?: CreatableNamedReference;
};

export type EnvironmentInfo = {
    name?: string;
    url?: string;
    attributes?: unknown;
};

export type EnvironmentInfoResponse = {
    environment: NamedReference;
    deployment?: DeploymentDetail;
    status?: NamedReference;
};

export type DeploymentDetail = {
    readonly id?: number;
    readonly environmentId?: number;
    versionName?: string;
    versionId?: string;
    readonly deployer?: string;
    /**
     * ISO-8601 date time format
     */
    deployedOn?: string;
    buildNumber?: string;
    description?: string;
    issueKeys?: Array<(string)>;
    attributes?: unknown;
};

export enum DefaultBoolean {
    YES = 'yes',
    NO = 'no',
    DEFAULT = 'default'
}

export type DeployedIssues = {
    addDoneIssuesFixedInVersion?: boolean;
    issueKeys?: Array<(string)>;
    jql?: string;
    noFixVersionUpdate?: boolean;
    sendJiraNotification?: boolean;
};

export type VersionIssues = {
    issueKeys?: Array<(string)>;
    jql?: string;
    sendJiraNotification?: boolean;
};

export type VersionInfo = {
    versionId: number;
    versionName: string;
    versionDescription?: string;
    startDate?: string;
    releaseDate?: string;
    released?: boolean;
    fixedIssues?: Array<(string)>;
};

export type VersionInfoResponse = {
    versions?: Array<VersionInfo>;
};

export type PostApplicationData = {
    /**
     * An application request
     */
    requestBody: ApplicationRequest;
};

export type PostApplicationResponse = ApplicationResponse;

export type GetApplicationByIdData = {
    id: number;
};

export type GetApplicationByIdResponse = ApplicationResponse;

export type PutApplicationByIdData = {
    id: number;
    /**
     * An application request
     */
    requestBody: ApplicationRequest;
};

export type PutApplicationByIdResponse = ApplicationResponse;

export type DeleteApplicationByIdData = {
    id: number;
};

export type DeleteApplicationByIdResponse = unknown;

export type GetApplicationsData = {
    /**
     * Set it to false for lighter JSON
     */
    expand?: boolean;
};

export type GetApplicationsResponse = Array<ApplicationResponse>;

export type PostCategoryData = {
    /**
     * A category
     */
    requestBody: EnvironmentCategory;
};

export type PostCategoryResponse = EnvironmentCategory;

export type GetCategoryByIdData = {
    id: number;
};

export type GetCategoryByIdResponse = EnvironmentCategory;

export type PutCategoryByIdData = {
    id: number;
    /**
     * a category
     */
    requestBody: EnvironmentCategory;
};

export type PutCategoryByIdResponse = EnvironmentCategory;

export type DeleteData = {
    id: number;
};

export type DeleteResponse = EnvironmentCategory;

export type GetCategoriesResponse = Array<EnvironmentCategory>;

export type PostStatusData = {
    requestBody: EnvironmentStatus;
};

export type PostStatusResponse = EnvironmentStatus;

export type GetStatusByIdData = {
    id: number;
};

export type GetStatusByIdResponse = EnvironmentStatus;

export type PutStatusByIdData = {
    id: number;
    requestBody: EnvironmentStatus;
};

export type PutStatusByIdResponse = EnvironmentStatus;

export type DeleteStatusByIdData = {
    id: number;
};

export type DeleteStatusByIdResponse = unknown;

export type GetStatusesResponse = Array<EnvironmentStatus>;

export type GetDeploymentData = {
    /**
     * Application name. Ex: eCommerce
     */
    application?: string;
    /**
     * Category name. Ex: Staging
     */
    category?: string;
    /**
     * Date in the past. Ex: 2018-01-31 13:30 or in ms : 1537679702182
     */
    dateTime?: string;
    /**
     * Environment id. Ex: 1
     */
    environmentId?: number;
    /**
     * Absolute time in ms. Ex: 12300054 . Note that time must be in
     * the past. Time will override dateTime param if both params are set.
     *
     */
    time?: number;
};

export type GetDeploymentResponse = DeploymentResponse;

export type PutDeploymentData = {
    /**
     * Application name. Ex: eCommerce
     */
    application?: string;
    /**
     * Category name. Ex: Staging
     */
    category?: string;
    /**
     * Date in the past. Ex: 2018-01-31 13:30. Note that timezone of
     * the server will be used to get the time! Prefer using the time parameter
     * in ms to avoid timezone issues.
     *
     */
    dateTime?: string;
    /**
     * Environment id. Ex: 1
     */
    environmentId?: number;
    requestBody: DeploymentRequest;
    /**
     * Absolute time in ms. Ex: 12300054 . Note that time must be in
     * the past. Time will override dateTime param if both params are set.
     *
     */
    time?: number;
};

export type PutDeploymentResponse = DeploymentResponse;

export type GetDeploymentByIdData = {
    id: number;
};

export type GetDeploymentByIdResponse = DeploymentResponse;

export type DeleteDeploymentByIdData = {
    id: number;
};

export type DeleteDeploymentByIdResponse = DeploymentResponse;

export type GetDeploymentsData = {
    application?: string;
    category?: string;
    /**
     * Ex: 2018-02-25
     */
    end?: string;
    environmentId?: number;
    /**
     * Set it to false for lighter JSON
     */
    expand?: boolean;
    /**
     * Unlimited number of results: -1
     */
    maxResults?: number;
    /**
     * Ex: 2018-01-31
     */
    start?: string;
};

export type GetDeploymentsResponse = Array<DeploymentResponse>;

export type PostDeploymentsIssueData = {
    requestBody: IssueDeployedRequest;
};

export type PostDeploymentsIssueResponse = unknown;

export type PostVersionData = {
    requestBody: VersionInfoRequest;
};

export type PostVersionResponse = VersionInfoResponse;

export type GetStatusChangeData = {
    /**
     * Application name. Ex: eCommerce
     */
    application?: string;
    /**
     * Category name. Ex: Staging
     */
    category?: string;
    /**
     * Environment id. Ex: 1
     */
    environmentId?: number;
};

export type GetStatusChangeResponse = StatusChange;

export type PutStatusChangeData = {
    /**
     * Application name. Ex: eCommerce
     */
    application?: string;
    /**
     * Category name. Ex: Staging
     */
    category?: string;
    /**
     * Environment id. Ex: 1
     */
    environmentId?: number;
    /**
     * Examples of valid json body:
     * {"name":"Unavailable"}
     * or
     * {id": 1}
     *
     */
    requestBody: EnvironmentStatusChangeRequest;
};

export type PutStatusChangeResponse = StatusChange;

export type GetStatusChangesData = {
    /**
     * Application name. Ex: eCommerce
     */
    application?: string;
    /**
     * Category name. Ex: Staging
     */
    category?: string;
    /**
     * Ex: 2019-01-31
     */
    end?: string;
    /**
     * Environment id. Ex: 1
     */
    environmentId?: number;
    /**
     * Set it to false for lighter JSON
     */
    expand?: boolean;
    /**
     * Unlimited number of results: -1
     */
    maxResult?: number;
    /**
     * Ex: 2018-01-31
     */
    start?: string;
};

export type GetStatusChangesResponse = Array<StatusChange>;

export type PostStatusChangesData = {
    requestBody: ScopedStatusChangeRequest;
};

export type PostStatusChangesResponse = StatusChangesResponse;

export type PutStatusChangesData = {
    requestBody: ScopedStatusChangeRequest;
};

export type PutStatusChangesResponse = StatusChangesResponse;

export type GetEnvironmentData = {
    /**
     * Application name. Ex: eCommerce
     */
    application: string;
    /**
     * Category name. Ex: Staging
     */
    category: string;
};

export type GetEnvironmentResponse = EnvironmentResponse;

export type PostEnvironmentData = {
    /**
     * Example of realistic body: <pre><code>{
     * "application": { "name": "eCommerce" },
     * "category": { "name":"Staging" },
     * "environmentPermissionScheme": { "id": 1 },
     * "url": "https://ecom-staging-my-company.com/welcome",
     * "attributes": {
     * "OS": "RedHat 7",
     * "database": "postgres",
     * "location": "EU"
     * }
     * }</code></pre>
     */
    requestBody: EnvironmentRequest;
};

export type PostEnvironmentResponse = EnvironmentResponse;

export type PostEnvironmentCloneData = {
    requestBody: CloneEnvironmentRequest;
};

export type PostEnvironmentCloneResponse = EnvironmentResponse;

export type GetEnvironmentByIdData = {
    id: number;
};

export type GetEnvironmentByIdResponse = EnvironmentResponse;

export type PutEnvironmentByIdData = {
    id: number;
    /**
     * Example: set url and some attributes: <pre><code>{
     * "url": "https://ecom-staging-my-company.com/welcome/NEWURL",
     * "attributes": {
     * "OS": "RedHat 8",
     * "database": "mongo",
     * "location": "US"
     * }
     * }</code></pre><br/>Example: change application and category: <pre><code>{
     * "application": {
     * "name": "Payment Service"
     * },
     * "category": {
     * "name": "Demo"
     * }
     * }</code></pre>
     */
    requestBody: EnvironmentRequest;
};

export type PutEnvironmentByIdResponse = EnvironmentResponse;

export type DeleteEnvironmentByIdData = {
    id: number;
};

export type DeleteEnvironmentByIdResponse = EnvironmentResponse;

export type PostEnvironmentInformationData = {
    requestBody: EnvironmentInfoRequest;
};

export type PostEnvironmentInformationResponse = EnvironmentInfoResponse;

export type GetEnvironmentsSearchData = {
    /**
     * Application id (ex: 23)
     */
    applicationId?: Array<(number)>;
    /**
     * Application name (ex: eCommerce)
     */
    applicationName?: Array<(string)>;
    /**
     * Category id (ex: 2)
     */
    categoryId?: Array<(number)>;
    /**
     * Category Name (ex: Staging)
     */
    categoryName?: Array<(string)>;
    /**
     * Set it to false for lighter JSON
     */
    expand?: boolean;
    /**
     * Max number of results (0 = unlimited)
     */
    limit?: number;
    /**
     * First result to return (ex: 10)
     */
    offset?: number;
    /**
     * Permission scheme id (ex: 1)
     */
    permissionSchemeId?: Array<(number)>;
    /**
     * Permission scheme name (ex: Default Environment Permission Scheme)
     */
    permissionSchemeName?: Array<(string)>;
    /**
     * Sort by
     */
    sortBy?: string;
    /**
     * Sort order
     */
    sortOrder?: string;
    /**
     * Status id (ex: 3)
     */
    statusId?: Array<(number)>;
    /**
     * Status Name (ex: Slow)
     */
    statusName?: Array<(string)>;
};

export type GetEnvironmentsSearchResponse = Array<EnvironmentResponse>;

export type PostEnvironmentsSearchData = {
    requestBody: EnvironmentFilter;
};

export type PostEnvironmentsSearchResponse = Array<EnvironmentResponse>;

export type GetEnvironmentsSearchPaginatedData = {
    /**
     * Application id (ex: 23)
     */
    applicationId?: Array<(number)>;
    /**
     * Application name (ex: eCommerce)
     */
    applicationName?: Array<(string)>;
    /**
     * Category id (ex: 2)
     */
    categoryId?: Array<(number)>;
    /**
     * Category Name (ex: Staging)
     */
    categoryName?: Array<(string)>;
    /**
     * Environment id (ex: 23)
     */
    environmentId?: Array<(number)>;
    /**
     * Environment name (ex: eCommerce Dev 1)
     */
    environmentName?: Array<(string)>;
    /**
     * Set it to false for lighter JSON
     */
    expand?: boolean;
    /**
     * Max number of results (0 = unlimited)
     */
    limit?: number;
    /**
     * First result to return (ex: 10)
     */
    offset?: number;
    /**
     * Panel scheme id (ex: 1)
     */
    panelSchemeId?: Array<(number)>;
    /**
     * Permission scheme id (ex: 1)
     */
    permissionSchemeId?: Array<(number)>;
    /**
     * Permission scheme name (ex: Default Environment Permission Scheme)
     */
    permissionSchemeName?: Array<(string)>;
    /**
     * Sort by
     */
    sortBy?: string;
    /**
     * Sort order
     */
    sortOrder?: string;
    /**
     * Status id (ex: 3)
     */
    statusId?: Array<(number)>;
    /**
     * Status Name (ex: Slow)
     */
    statusName?: Array<(string)>;
    /**
     * Tier relation type (ex: HAS_TIERS, HAS_NO_TIERS, HAS_PARENT, IS_TIER, IS_ORPHAN)
     */
    tierRelation?: Array<(string)>;
};

export type GetEnvironmentsSearchPaginatedResponse = PaginatedEnvironmentResponse;

export type PostEnvironmentsSearchPaginatedData = {
    /**
     * search filter object
     */
    requestBody: EnvironmentFilter;
};

export type PostEnvironmentsSearchPaginatedResponse = PaginatedEnvironmentResponse;

export type GetWatcherStatisticsResponse = WatcherStatistics;

export type GetWatcherUserData = {
    environmentId: number;
    userKey?: string;
    userName?: string;
};

export type GetWatcherUserResponse = EnvironmentWatcher;

export type PostWatcherUserData = {
    environmentId: number;
    requestBody: EnvironmentWatcher;
    userKey?: string;
    userName?: string;
};

export type PostWatcherUserResponse = EnvironmentWatcher;

export type PutWatcherUserData = {
    environmentId: number;
    requestBody: EnvironmentWatcher;
    userKey?: string;
    userName?: string;
};

export type PutWatcherUserResponse = EnvironmentWatcher;

export type DeleteWatcherUserData = {
    environmentId: number;
    userKey?: string;
    userName?: string;
};

export type DeleteWatcherUserResponse = unknown;

export type $OpenApiTs = {
    '/application': {
        post: {
            req: PostApplicationData;
            res: {
                /**
                 * successful operation
                 */
                200: ApplicationResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/application/{id}': {
        get: {
            req: GetApplicationByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: ApplicationResponse;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        put: {
            req: PutApplicationByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: ApplicationResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        delete: {
            req: DeleteApplicationByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: unknown;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
    };
    '/applications': {
        get: {
            req: GetApplicationsData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<ApplicationResponse>;
            };
        };
    };
    '/category': {
        post: {
            req: PostCategoryData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentCategory;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/category/{id}': {
        get: {
            req: GetCategoryByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentCategory;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        put: {
            req: PutCategoryByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentCategory;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        delete: {
            req: DeleteData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentCategory;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
    };
    '/categories': {
        get: {
            res: {
                /**
                 * successful operation
                 */
                200: Array<EnvironmentCategory>;
            };
        };
    };
    '/status': {
        post: {
            req: PostStatusData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentStatus;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/status/{id}': {
        get: {
            req: GetStatusByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentStatus;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        put: {
            req: PutStatusByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentStatus;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        delete: {
            req: DeleteStatusByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: unknown;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
    };
    '/statuses': {
        get: {
            res: {
                /**
                 * successful operation
                 */
                200: Array<EnvironmentStatus>;
            };
        };
    };
    '/deployment': {
        get: {
            req: GetDeploymentData;
            res: {
                /**
                 * successful operation
                 */
                200: DeploymentResponse;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        put: {
            req: PutDeploymentData;
            res: {
                /**
                 * successful operation
                 */
                200: DeploymentResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/deployment/{id}': {
        get: {
            req: GetDeploymentByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: DeploymentResponse;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        delete: {
            req: DeleteDeploymentByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: DeploymentResponse;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
    };
    '/deployments': {
        get: {
            req: GetDeploymentsData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<DeploymentResponse>;
            };
        };
    };
    '/deployments/issue': {
        post: {
            req: PostDeploymentsIssueData;
            res: {
                /**
                 * successful operation
                 */
                default: unknown;
            };
        };
    };
    '/version': {
        post: {
            req: PostVersionData;
            res: {
                /**
                 * successful operation
                 */
                200: VersionInfoResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/status-change': {
        get: {
            req: GetStatusChangeData;
            res: {
                /**
                 * successful operation
                 */
                200: StatusChange;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
        put: {
            req: PutStatusChangeData;
            res: {
                /**
                 * successful operation
                 */
                200: StatusChange;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
                /**
                 * Resource has not been found.
                 */
                404: ErrorCollection;
            };
        };
    };
    '/status-changes': {
        get: {
            req: GetStatusChangesData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<StatusChange>;
            };
        };
        post: {
            req: PostStatusChangesData;
            res: {
                /**
                 * successful operation
                 */
                200: StatusChangesResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
        put: {
            req: PutStatusChangesData;
            res: {
                /**
                 * successful operation
                 */
                200: StatusChangesResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/environment': {
        get: {
            req: GetEnvironmentData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
        post: {
            req: PostEnvironmentData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
    };
    '/environment/clone': {
        post: {
            req: PostEnvironmentCloneData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
    };
    '/environment/{id}': {
        get: {
            req: GetEnvironmentByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
        put: {
            req: PutEnvironmentByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
        delete: {
            req: DeleteEnvironmentByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentResponse;
            };
        };
    };
    '/environment/information': {
        post: {
            req: PostEnvironmentInformationData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentInfoResponse;
                /**
                 * Request was invalid, reason should be provided in response body.
                 */
                400: ErrorCollection;
            };
        };
    };
    '/environments/search': {
        get: {
            req: GetEnvironmentsSearchData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<EnvironmentResponse>;
            };
        };
        post: {
            req: PostEnvironmentsSearchData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<EnvironmentResponse>;
            };
        };
    };
    '/environments/search/paginated': {
        get: {
            req: GetEnvironmentsSearchPaginatedData;
            res: {
                /**
                 * successful operation
                 */
                200: PaginatedEnvironmentResponse;
            };
        };
        post: {
            req: PostEnvironmentsSearchPaginatedData;
            res: {
                /**
                 * successful operation
                 */
                200: PaginatedEnvironmentResponse;
            };
        };
    };
    '/watcher/statistics': {
        get: {
            res: {
                /**
                 * successful operation
                 */
                200: WatcherStatistics;
            };
        };
    };
    '/watcher/user': {
        get: {
            req: GetWatcherUserData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentWatcher;
            };
        };
        post: {
            req: PostWatcherUserData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentWatcher;
            };
        };
        put: {
            req: PutWatcherUserData;
            res: {
                /**
                 * successful operation
                 */
                200: EnvironmentWatcher;
            };
        };
        delete: {
            req: DeleteWatcherUserData;
            res: {
                /**
                 * successful operation
                 */
                default: unknown;
            };
        };
    };
};