// This file is auto-generated by @hey-api/openapi-ts
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
export class ApplicationService {
    /**
     * Create a new application
     * @param data The data for the request.
     * @param data.requestBody An application request
     * @returns ApplicationResponse successful operation
     * @throws ApiError
     */
    static postApplication(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/application',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * Get an application
     * @param data The data for the request.
     * @param data.id
     * @returns ApplicationResponse successful operation
     * @throws ApiError
     */
    static getApplicationById(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/application/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Update an application
     * # Updating an application
     * Updating an application can be done in patch style mode. For example:
     * * select an id
     * * provide the id in the URL
     * * call the method
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody An application request
     * @returns ApplicationResponse successful operation
     * @throws ApiError
     */
    static putApplicationById(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/application/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.',
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Delete an application
     * @param data The data for the request.
     * @param data.id
     * @returns unknown successful operation
     * @throws ApiError
     */
    static deleteApplicationById(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/application/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Find applications
     * @param data The data for the request.
     * @param data.expand Set it to false for lighter JSON
     * @returns ApplicationResponse successful operation
     * @throws ApiError
     */
    static getApplications(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/applications',
            query: {
                _expand: data.expand
            }
        });
    }
}
export class CategoryService {
    /**
     * Create new category
     * @param data The data for the request.
     * @param data.requestBody A category
     * @returns EnvironmentCategory successful operation
     * @throws ApiError
     */
    static postCategory(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/category',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * Get category
     * @param data The data for the request.
     * @param data.id
     * @returns EnvironmentCategory successful operation
     * @throws ApiError
     */
    static getCategoryById(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/category/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Update category
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody a category
     * @returns EnvironmentCategory successful operation
     * @throws ApiError
     */
    static putCategoryById(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/category/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.',
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Delete category
     * @param data The data for the request.
     * @param data.id
     * @returns EnvironmentCategory successful operation
     * @throws ApiError
     */
    static delete(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/category/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Get all categories
     * @returns EnvironmentCategory successful operation
     * @throws ApiError
     */
    static getCategories() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories'
        });
    }
}
export class EnvironmentStatusService {
    /**
     * Create new environment status
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EnvironmentStatus successful operation
     * @throws ApiError
     */
    static postStatus(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/status',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * Get environment status
     * @param data The data for the request.
     * @param data.id
     * @returns EnvironmentStatus successful operation
     * @throws ApiError
     */
    static getStatusById(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/status/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Update an environment status
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns EnvironmentStatus successful operation
     * @throws ApiError
     */
    static putStatusById(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/status/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.',
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Delete an environment status
     * @param data The data for the request.
     * @param data.id
     * @returns unknown successful operation
     * @throws ApiError
     */
    static deleteStatusById(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/status/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Get all existing Statuses
     * @returns EnvironmentStatus successful operation
     * @throws ApiError
     */
    static getStatuses() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/statuses'
        });
    }
}
export class DeploymentService {
    /**
     * Get the deployed version
     * @param data The data for the request.
     * @param data.environmentId Environment id. Ex: 1
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @param data.dateTime Date in the past. Ex: 2018-01-31 13:30 or in ms : 1537679702182
     * @param data.time Absolute time in ms. Ex: 12300054 . Note that time must be in
     * the past. Time will override dateTime param if both params are set.
     *
     * @returns DeploymentResponse successful operation
     * @throws ApiError
     */
    static getDeployment(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployment',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category,
                dateTime: data.dateTime,
                time: data.time
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Update the deployed version
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.environmentId Environment id. Ex: 1
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @param data.dateTime Date in the past. Ex: 2018-01-31 13:30. Note that timezone of
     * the server will be used to get the time! Prefer using the time parameter
     * in ms to avoid timezone issues.
     *
     * @param data.time Absolute time in ms. Ex: 12300054 . Note that time must be in
     * the past. Time will override dateTime param if both params are set.
     *
     * @returns DeploymentResponse successful operation
     * @throws ApiError
     */
    static putDeployment(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/deployment',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category,
                dateTime: data.dateTime,
                time: data.time
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * Get deployment
     * @param data The data for the request.
     * @param data.id
     * @returns DeploymentResponse successful operation
     * @throws ApiError
     */
    static getDeploymentById(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployment/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Remove deployment
     * @param data The data for the request.
     * @param data.id
     * @returns DeploymentResponse successful operation
     * @throws ApiError
     */
    static deleteDeploymentById(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/deployment/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Search deployments
     * @param data The data for the request.
     * @param data.environmentId
     * @param data.application
     * @param data.category
     * @param data.start Ex: 2018-01-31
     * @param data.end Ex: 2018-02-25
     * @param data.maxResults Unlimited number of results: -1
     * @param data.expand Set it to false for lighter JSON
     * @returns DeploymentResponse successful operation
     * @throws ApiError
     */
    static getDeployments(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployments',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category,
                start: data.start,
                end: data.end,
                maxResults: data.maxResults,
                expand: data.expand
            }
        });
    }
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown successful operation
     * @throws ApiError
     */
    static postDeploymentsIssue(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/issue',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
}
export class VersionService {
    /**
     * Create and Update Jira Versions
     * @param data The data for the request.
     * @param data.requestBody
     * @returns VersionInfoResponse successful operation
     * @throws ApiError
     */
    static postVersion(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/version',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
}
export class EnvironmentStatusChangeService {
    /**
     * Get current status of an environment
     * @param data The data for the request.
     * @param data.environmentId Environment id. Ex: 1
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @returns StatusChange successful operation
     * @throws ApiError
     */
    static getStatusChange(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/status-change',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category
            },
            errors: {
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Change status of an environment
     * @param data The data for the request.
     * @param data.requestBody Examples of valid json body:
     * {"name":"Unavailable"}
     * or
     * {id": 1}
     *
     * @param data.environmentId Environment id. Ex: 1
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @returns StatusChange successful operation
     * @throws ApiError
     */
    static putStatusChange(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/status-change',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.',
                404: 'Resource has not been found.'
            }
        });
    }
    /**
     * Search for status changes
     * @param data The data for the request.
     * @param data.environmentId Environment id. Ex: 1
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @param data.start Ex: 2018-01-31
     * @param data.end Ex: 2019-01-31
     * @param data.maxResult Unlimited number of results: -1
     * @param data.expand Set it to false for lighter JSON
     * @returns StatusChange successful operation
     * @throws ApiError
     */
    static getStatusChanges(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/status-changes',
            query: {
                environmentId: data.environmentId,
                application: data.application,
                category: data.category,
                start: data.start,
                end: data.end,
                maxResult: data.maxResult,
                expand: data.expand
            }
        });
    }
    /**
     * Change status of environments matching criteria
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StatusChangesResponse successful operation
     * @throws ApiError
     */
    static postStatusChanges(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/status-changes',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * Change status of environments matching criteria
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StatusChangesResponse successful operation
     * @throws ApiError
     */
    static putStatusChanges(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/status-changes',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
}
export class EnvironmentService {
    /**
     * Get an environment by application and category
     * @param data The data for the request.
     * @param data.application Application name. Ex: eCommerce
     * @param data.category Category name. Ex: Staging
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static getEnvironment(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/environment',
            query: {
                application: data.application,
                category: data.category
            }
        });
    }
    /**
     * Create a new environment
     * @param data The data for the request.
     * @param data.requestBody Example of realistic body: <pre><code>{
     * "application": { "name": "eCommerce" },
     * "category": { "name":"Staging" },
     * "environmentPermissionScheme": { "id": 1 },
     * "url": "https://ecom-staging-my-company.com/welcome",
     * "attributes": {
     * "OS": "RedHat 7",
     * "database": "postgres",
     * "location": "EU"
     * }
     * }</code></pre>
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static postEnvironment(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/environment',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Clone environment
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static postEnvironmentClone(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/environment/clone',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Get an environment by id
     * @param data The data for the request.
     * @param data.id
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static getEnvironmentById(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/environment/{id}',
            path: {
                id: data.id
            }
        });
    }
    /**
     * Update an environment
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Example: set url and some attributes: <pre><code>{
     * "url": "https://ecom-staging-my-company.com/welcome/NEWURL",
     * "attributes": {
     * "OS": "RedHat 8",
     * "database": "mongo",
     * "location": "US"
     * }
     * }</code></pre><br/>Example: change application and category: <pre><code>{
     * "application": {
     * "name": "Payment Service"
     * },
     * "category": {
     * "name": "Demo"
     * }
     * }</code></pre>
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static putEnvironmentById(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/environment/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Delete environment
     * @param data The data for the request.
     * @param data.id
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static deleteEnvironmentById(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/environment/{id}',
            path: {
                id: data.id
            }
        });
    }
    /**
     * Create and Push Environment Information
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EnvironmentInfoResponse successful operation
     * @throws ApiError
     */
    static postEnvironmentInformation(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/environment/information',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Request was invalid, reason should be provided in response body.'
            }
        });
    }
    /**
     * @deprecated
     * Search environments by query parameters
     * Combine any pre-defined <b>search parameters listed below</b>
     * and pass them to url as query parameters. <br/><br/>Other parameters you can
     * use:<br/>* parameters with no value to perform a <b>free text search</b> on
     * all information of your environments (ex: <i>?Staging&eCommerce&RedHat</i>)<br/>*
     * name of an <b>attribute as query parameter</b> (ex: <i>?OS=RedHat&database=Postgresql</i>)<br/><br/>Note
     * that you can send the same parameter <b>multiple times</b> with different
     * values (ex: <i>?applicationName=eCommerce&applicationName=PaymentService</i>).
     * It will return environments matching at least one of the values'
     *
     * @param data The data for the request.
     * @param data.applicationName Application name (ex: eCommerce)
     * @param data.applicationId Application id (ex: 23)
     * @param data.categoryName Category Name (ex: Staging)
     * @param data.categoryId Category id (ex: 2)
     * @param data.statusName Status Name (ex: Slow)
     * @param data.statusId Status id (ex: 3)
     * @param data.permissionSchemeName Permission scheme name (ex: Default Environment Permission Scheme)
     * @param data.permissionSchemeId Permission scheme id (ex: 1)
     * @param data.limit Max number of results (0 = unlimited)
     * @param data.offset First result to return (ex: 10)
     * @param data.sortOrder Sort order
     * @param data.sortBy Sort by
     * @param data.expand Set it to false for lighter JSON
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static getEnvironmentsSearch(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/environments/search',
            query: {
                applicationName: data.applicationName,
                applicationId: data.applicationId,
                categoryName: data.categoryName,
                categoryId: data.categoryId,
                statusName: data.statusName,
                statusId: data.statusId,
                permissionSchemeName: data.permissionSchemeName,
                permissionSchemeId: data.permissionSchemeId,
                _limit: data.limit,
                _offset: data.offset,
                _sortOrder: data.sortOrder,
                _sortBy: data.sortBy,
                _expand: data.expand
            }
        });
    }
    /**
     * @deprecated
     * Search environments by search filter object
     * You can use the same search criteria as the 'GET' version of <i>/environments/search</i>
     * in a JSON object to trigger the search. <br/>Please refer to documentation
     * of the 'GET' version of <i>/environments/search</i>  to get the list of available
     * criteria.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EnvironmentResponse successful operation
     * @throws ApiError
     */
    static postEnvironmentsSearch(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/environments/search',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Search environments by query parameters
     * Combine any pre-defined <b>search parameters listed below</b>
     * and pass them to url as query parameters. <br/><br/>Other parameters you can
     * use:<br/>* parameters with no value to perform a <b>free text search</b> on
     * all information of your environments (ex: <i>?Staging&eCommerce&RedHat</i>)<br/>*
     * name of an <b>attribute as query parameter</b> (ex: <i>?OS=RedHat&database=Postgresql</i>)<br/><br/>Note
     * that you can send the same parameter <b>multiple times</b> with different
     * values (ex: <i>?applicationName=eCommerce&applicationName=PaymentService</i>).
     * It will return environments matching at least one of the values
     *
     * @param data The data for the request.
     * @param data.environmentId Environment id (ex: 23)
     * @param data.environmentName Environment name (ex: eCommerce Dev 1)
     * @param data.applicationName Application name (ex: eCommerce)
     * @param data.applicationId Application id (ex: 23)
     * @param data.categoryName Category Name (ex: Staging)
     * @param data.categoryId Category id (ex: 2)
     * @param data.statusName Status Name (ex: Slow)
     * @param data.statusId Status id (ex: 3)
     * @param data.permissionSchemeName Permission scheme name (ex: Default Environment Permission Scheme)
     * @param data.permissionSchemeId Permission scheme id (ex: 1)
     * @param data.panelSchemeId Panel scheme id (ex: 1)
     * @param data.tierRelation Tier relation type (ex: HAS_TIERS, HAS_NO_TIERS, HAS_PARENT, IS_TIER, IS_ORPHAN)
     * @param data.limit Max number of results (0 = unlimited)
     * @param data.offset First result to return (ex: 10)
     * @param data.sortOrder Sort order
     * @param data.sortBy Sort by
     * @param data.expand Set it to false for lighter JSON
     * @returns PaginatedEnvironmentResponse successful operation
     * @throws ApiError
     */
    static getEnvironmentsSearchPaginated(data = {}) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/environments/search/paginated',
            query: {
                environmentId: data.environmentId,
                environmentName: data.environmentName,
                applicationName: data.applicationName,
                applicationId: data.applicationId,
                categoryName: data.categoryName,
                categoryId: data.categoryId,
                statusName: data.statusName,
                statusId: data.statusId,
                permissionSchemeName: data.permissionSchemeName,
                permissionSchemeId: data.permissionSchemeId,
                panelSchemeId: data.panelSchemeId,
                tierRelation: data.tierRelation,
                _limit: data.limit,
                _offset: data.offset,
                _sortOrder: data.sortOrder,
                _sortBy: data.sortBy,
                _expand: data.expand
            }
        });
    }
    /**
     * Search environments by search filter object
     * You can use the same search criteria as the 'GET' version of <i>/environments/search/paginated</i>
     * in a JSON object to trigger the search. <br/>Please refer to documentation
     * of the 'GET' version of <i>/environments/search/paginated</i>  to get the
     * list of available criteria.
     *
     * @param data The data for the request.
     * @param data.requestBody search filter object
     * @returns PaginatedEnvironmentResponse successful operation
     * @throws ApiError
     */
    static postEnvironmentsSearchPaginated(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/environments/search/paginated',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
}
export class WatcherService {
    /**
     * Count number of watchers per environment
     * @returns WatcherStatistics successful operation
     * @throws ApiError
     */
    static getWatcherStatistics() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/watcher/statistics'
        });
    }
    /**
     * Get environment watcher
     * @param data The data for the request.
     * @param data.environmentId
     * @param data.userName
     * @param data.userKey
     * @returns EnvironmentWatcher successful operation
     * @throws ApiError
     */
    static getWatcherUser(data) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/watcher/user',
            query: {
                environmentId: data.environmentId,
                userName: data.userName,
                userKey: data.userKey
            }
        });
    }
    /**
     * Create new environment watcher
     * @param data The data for the request.
     * @param data.environmentId
     * @param data.requestBody
     * @param data.userName
     * @param data.userKey
     * @returns EnvironmentWatcher successful operation
     * @throws ApiError
     */
    static postWatcherUser(data) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/watcher/user',
            query: {
                environmentId: data.environmentId,
                userName: data.userName,
                userKey: data.userKey
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Update environment watcher
     * @param data The data for the request.
     * @param data.environmentId
     * @param data.requestBody
     * @param data.userName
     * @param data.userKey
     * @returns EnvironmentWatcher successful operation
     * @throws ApiError
     */
    static putWatcherUser(data) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/watcher/user',
            query: {
                environmentId: data.environmentId,
                userName: data.userName,
                userKey: data.userKey
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Remove environment watcher
     * @param data The data for the request.
     * @param data.environmentId
     * @param data.userName
     * @param data.userKey
     * @returns unknown successful operation
     * @throws ApiError
     */
    static deleteWatcherUser(data) {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/watcher/user',
            query: {
                environmentId: data.environmentId,
                userName: data.userName,
                userKey: data.userKey
            }
        });
    }
}
